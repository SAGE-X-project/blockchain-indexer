// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: api/proto/indexer/v1/indexer.proto

package indexerv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IndexerService_GetChain_FullMethodName                  = "/indexer.v1.IndexerService/GetChain"
	IndexerService_ListChains_FullMethodName                = "/indexer.v1.IndexerService/ListChains"
	IndexerService_GetBlock_FullMethodName                  = "/indexer.v1.IndexerService/GetBlock"
	IndexerService_GetBlockByHash_FullMethodName            = "/indexer.v1.IndexerService/GetBlockByHash"
	IndexerService_ListBlocks_FullMethodName                = "/indexer.v1.IndexerService/ListBlocks"
	IndexerService_GetLatestBlock_FullMethodName            = "/indexer.v1.IndexerService/GetLatestBlock"
	IndexerService_GetTransaction_FullMethodName            = "/indexer.v1.IndexerService/GetTransaction"
	IndexerService_ListTransactionsByBlock_FullMethodName   = "/indexer.v1.IndexerService/ListTransactionsByBlock"
	IndexerService_ListTransactionsByAddress_FullMethodName = "/indexer.v1.IndexerService/ListTransactionsByAddress"
	IndexerService_GetProgress_FullMethodName               = "/indexer.v1.IndexerService/GetProgress"
	IndexerService_ListGaps_FullMethodName                  = "/indexer.v1.IndexerService/ListGaps"
	IndexerService_GetStats_FullMethodName                  = "/indexer.v1.IndexerService/GetStats"
	IndexerService_StreamBlocks_FullMethodName              = "/indexer.v1.IndexerService/StreamBlocks"
	IndexerService_StreamTransactions_FullMethodName        = "/indexer.v1.IndexerService/StreamTransactions"
	IndexerService_StreamProgress_FullMethodName            = "/indexer.v1.IndexerService/StreamProgress"
)

// IndexerServiceClient is the client API for IndexerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// IndexerService provides blockchain indexing data access
type IndexerServiceClient interface {
	// Chain operations
	GetChain(ctx context.Context, in *GetChainRequest, opts ...grpc.CallOption) (*GetChainResponse, error)
	ListChains(ctx context.Context, in *ListChainsRequest, opts ...grpc.CallOption) (*ListChainsResponse, error)
	// Block operations
	GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error)
	GetBlockByHash(ctx context.Context, in *GetBlockByHashRequest, opts ...grpc.CallOption) (*GetBlockByHashResponse, error)
	ListBlocks(ctx context.Context, in *ListBlocksRequest, opts ...grpc.CallOption) (*ListBlocksResponse, error)
	GetLatestBlock(ctx context.Context, in *GetLatestBlockRequest, opts ...grpc.CallOption) (*GetLatestBlockResponse, error)
	// Transaction operations
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	ListTransactionsByBlock(ctx context.Context, in *ListTransactionsByBlockRequest, opts ...grpc.CallOption) (*ListTransactionsByBlockResponse, error)
	ListTransactionsByAddress(ctx context.Context, in *ListTransactionsByAddressRequest, opts ...grpc.CallOption) (*ListTransactionsByAddressResponse, error)
	// Progress operations
	GetProgress(ctx context.Context, in *GetProgressRequest, opts ...grpc.CallOption) (*GetProgressResponse, error)
	// Gap operations
	ListGaps(ctx context.Context, in *ListGapsRequest, opts ...grpc.CallOption) (*ListGapsResponse, error)
	// Statistics
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error)
	// Streaming operations
	StreamBlocks(ctx context.Context, in *StreamBlocksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Block], error)
	StreamTransactions(ctx context.Context, in *StreamTransactionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Transaction], error)
	StreamProgress(ctx context.Context, in *StreamProgressRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Progress], error)
}

type indexerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewIndexerServiceClient(cc grpc.ClientConnInterface) IndexerServiceClient {
	return &indexerServiceClient{cc}
}

func (c *indexerServiceClient) GetChain(ctx context.Context, in *GetChainRequest, opts ...grpc.CallOption) (*GetChainResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetChainResponse)
	err := c.cc.Invoke(ctx, IndexerService_GetChain_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) ListChains(ctx context.Context, in *ListChainsRequest, opts ...grpc.CallOption) (*ListChainsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListChainsResponse)
	err := c.cc.Invoke(ctx, IndexerService_ListChains_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) GetBlock(ctx context.Context, in *GetBlockRequest, opts ...grpc.CallOption) (*GetBlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlockResponse)
	err := c.cc.Invoke(ctx, IndexerService_GetBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) GetBlockByHash(ctx context.Context, in *GetBlockByHashRequest, opts ...grpc.CallOption) (*GetBlockByHashResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBlockByHashResponse)
	err := c.cc.Invoke(ctx, IndexerService_GetBlockByHash_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) ListBlocks(ctx context.Context, in *ListBlocksRequest, opts ...grpc.CallOption) (*ListBlocksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBlocksResponse)
	err := c.cc.Invoke(ctx, IndexerService_ListBlocks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) GetLatestBlock(ctx context.Context, in *GetLatestBlockRequest, opts ...grpc.CallOption) (*GetLatestBlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetLatestBlockResponse)
	err := c.cc.Invoke(ctx, IndexerService_GetLatestBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, IndexerService_GetTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) ListTransactionsByBlock(ctx context.Context, in *ListTransactionsByBlockRequest, opts ...grpc.CallOption) (*ListTransactionsByBlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTransactionsByBlockResponse)
	err := c.cc.Invoke(ctx, IndexerService_ListTransactionsByBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) ListTransactionsByAddress(ctx context.Context, in *ListTransactionsByAddressRequest, opts ...grpc.CallOption) (*ListTransactionsByAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTransactionsByAddressResponse)
	err := c.cc.Invoke(ctx, IndexerService_ListTransactionsByAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) GetProgress(ctx context.Context, in *GetProgressRequest, opts ...grpc.CallOption) (*GetProgressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProgressResponse)
	err := c.cc.Invoke(ctx, IndexerService_GetProgress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) ListGaps(ctx context.Context, in *ListGapsRequest, opts ...grpc.CallOption) (*ListGapsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListGapsResponse)
	err := c.cc.Invoke(ctx, IndexerService_ListGaps_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, IndexerService_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *indexerServiceClient) StreamBlocks(ctx context.Context, in *StreamBlocksRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Block], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IndexerService_ServiceDesc.Streams[0], IndexerService_StreamBlocks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamBlocksRequest, Block]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IndexerService_StreamBlocksClient = grpc.ServerStreamingClient[Block]

func (c *indexerServiceClient) StreamTransactions(ctx context.Context, in *StreamTransactionsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Transaction], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IndexerService_ServiceDesc.Streams[1], IndexerService_StreamTransactions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamTransactionsRequest, Transaction]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IndexerService_StreamTransactionsClient = grpc.ServerStreamingClient[Transaction]

func (c *indexerServiceClient) StreamProgress(ctx context.Context, in *StreamProgressRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Progress], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &IndexerService_ServiceDesc.Streams[2], IndexerService_StreamProgress_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[StreamProgressRequest, Progress]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IndexerService_StreamProgressClient = grpc.ServerStreamingClient[Progress]

// IndexerServiceServer is the server API for IndexerService service.
// All implementations must embed UnimplementedIndexerServiceServer
// for forward compatibility.
//
// IndexerService provides blockchain indexing data access
type IndexerServiceServer interface {
	// Chain operations
	GetChain(context.Context, *GetChainRequest) (*GetChainResponse, error)
	ListChains(context.Context, *ListChainsRequest) (*ListChainsResponse, error)
	// Block operations
	GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error)
	GetBlockByHash(context.Context, *GetBlockByHashRequest) (*GetBlockByHashResponse, error)
	ListBlocks(context.Context, *ListBlocksRequest) (*ListBlocksResponse, error)
	GetLatestBlock(context.Context, *GetLatestBlockRequest) (*GetLatestBlockResponse, error)
	// Transaction operations
	GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error)
	ListTransactionsByBlock(context.Context, *ListTransactionsByBlockRequest) (*ListTransactionsByBlockResponse, error)
	ListTransactionsByAddress(context.Context, *ListTransactionsByAddressRequest) (*ListTransactionsByAddressResponse, error)
	// Progress operations
	GetProgress(context.Context, *GetProgressRequest) (*GetProgressResponse, error)
	// Gap operations
	ListGaps(context.Context, *ListGapsRequest) (*ListGapsResponse, error)
	// Statistics
	GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
	// Streaming operations
	StreamBlocks(*StreamBlocksRequest, grpc.ServerStreamingServer[Block]) error
	StreamTransactions(*StreamTransactionsRequest, grpc.ServerStreamingServer[Transaction]) error
	StreamProgress(*StreamProgressRequest, grpc.ServerStreamingServer[Progress]) error
	mustEmbedUnimplementedIndexerServiceServer()
}

// UnimplementedIndexerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIndexerServiceServer struct{}

func (UnimplementedIndexerServiceServer) GetChain(context.Context, *GetChainRequest) (*GetChainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChain not implemented")
}
func (UnimplementedIndexerServiceServer) ListChains(context.Context, *ListChainsRequest) (*ListChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChains not implemented")
}
func (UnimplementedIndexerServiceServer) GetBlock(context.Context, *GetBlockRequest) (*GetBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedIndexerServiceServer) GetBlockByHash(context.Context, *GetBlockByHashRequest) (*GetBlockByHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockByHash not implemented")
}
func (UnimplementedIndexerServiceServer) ListBlocks(context.Context, *ListBlocksRequest) (*ListBlocksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBlocks not implemented")
}
func (UnimplementedIndexerServiceServer) GetLatestBlock(context.Context, *GetLatestBlockRequest) (*GetLatestBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestBlock not implemented")
}
func (UnimplementedIndexerServiceServer) GetTransaction(context.Context, *GetTransactionRequest) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransaction not implemented")
}
func (UnimplementedIndexerServiceServer) ListTransactionsByBlock(context.Context, *ListTransactionsByBlockRequest) (*ListTransactionsByBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactionsByBlock not implemented")
}
func (UnimplementedIndexerServiceServer) ListTransactionsByAddress(context.Context, *ListTransactionsByAddressRequest) (*ListTransactionsByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTransactionsByAddress not implemented")
}
func (UnimplementedIndexerServiceServer) GetProgress(context.Context, *GetProgressRequest) (*GetProgressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgress not implemented")
}
func (UnimplementedIndexerServiceServer) ListGaps(context.Context, *ListGapsRequest) (*ListGapsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListGaps not implemented")
}
func (UnimplementedIndexerServiceServer) GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedIndexerServiceServer) StreamBlocks(*StreamBlocksRequest, grpc.ServerStreamingServer[Block]) error {
	return status.Errorf(codes.Unimplemented, "method StreamBlocks not implemented")
}
func (UnimplementedIndexerServiceServer) StreamTransactions(*StreamTransactionsRequest, grpc.ServerStreamingServer[Transaction]) error {
	return status.Errorf(codes.Unimplemented, "method StreamTransactions not implemented")
}
func (UnimplementedIndexerServiceServer) StreamProgress(*StreamProgressRequest, grpc.ServerStreamingServer[Progress]) error {
	return status.Errorf(codes.Unimplemented, "method StreamProgress not implemented")
}
func (UnimplementedIndexerServiceServer) mustEmbedUnimplementedIndexerServiceServer() {}
func (UnimplementedIndexerServiceServer) testEmbeddedByValue()                        {}

// UnsafeIndexerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IndexerServiceServer will
// result in compilation errors.
type UnsafeIndexerServiceServer interface {
	mustEmbedUnimplementedIndexerServiceServer()
}

func RegisterIndexerServiceServer(s grpc.ServiceRegistrar, srv IndexerServiceServer) {
	// If the following call pancis, it indicates UnimplementedIndexerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IndexerService_ServiceDesc, srv)
}

func _IndexerService_GetChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexerService_GetChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetChain(ctx, req.(*GetChainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_ListChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListChainsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).ListChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexerService_ListChains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).ListChains(ctx, req.(*ListChainsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexerService_GetBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetBlock(ctx, req.(*GetBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_GetBlockByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBlockByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetBlockByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexerService_GetBlockByHash_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetBlockByHash(ctx, req.(*GetBlockByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_ListBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBlocksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).ListBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexerService_ListBlocks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).ListBlocks(ctx, req.(*ListBlocksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_GetLatestBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLatestBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetLatestBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexerService_GetLatestBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetLatestBlock(ctx, req.(*GetLatestBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexerService_GetTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_ListTransactionsByBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionsByBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).ListTransactionsByBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexerService_ListTransactionsByBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).ListTransactionsByBlock(ctx, req.(*ListTransactionsByBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_ListTransactionsByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionsByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).ListTransactionsByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexerService_ListTransactionsByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).ListTransactionsByAddress(ctx, req.(*ListTransactionsByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_GetProgress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProgressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetProgress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexerService_GetProgress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetProgress(ctx, req.(*GetProgressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_ListGaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGapsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).ListGaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexerService_ListGaps_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).ListGaps(ctx, req.(*ListGapsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IndexerServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IndexerService_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IndexerServiceServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IndexerService_StreamBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamBlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IndexerServiceServer).StreamBlocks(m, &grpc.GenericServerStream[StreamBlocksRequest, Block]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IndexerService_StreamBlocksServer = grpc.ServerStreamingServer[Block]

func _IndexerService_StreamTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamTransactionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IndexerServiceServer).StreamTransactions(m, &grpc.GenericServerStream[StreamTransactionsRequest, Transaction]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IndexerService_StreamTransactionsServer = grpc.ServerStreamingServer[Transaction]

func _IndexerService_StreamProgress_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamProgressRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(IndexerServiceServer).StreamProgress(m, &grpc.GenericServerStream[StreamProgressRequest, Progress]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type IndexerService_StreamProgressServer = grpc.ServerStreamingServer[Progress]

// IndexerService_ServiceDesc is the grpc.ServiceDesc for IndexerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IndexerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "indexer.v1.IndexerService",
	HandlerType: (*IndexerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChain",
			Handler:    _IndexerService_GetChain_Handler,
		},
		{
			MethodName: "ListChains",
			Handler:    _IndexerService_ListChains_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _IndexerService_GetBlock_Handler,
		},
		{
			MethodName: "GetBlockByHash",
			Handler:    _IndexerService_GetBlockByHash_Handler,
		},
		{
			MethodName: "ListBlocks",
			Handler:    _IndexerService_ListBlocks_Handler,
		},
		{
			MethodName: "GetLatestBlock",
			Handler:    _IndexerService_GetLatestBlock_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _IndexerService_GetTransaction_Handler,
		},
		{
			MethodName: "ListTransactionsByBlock",
			Handler:    _IndexerService_ListTransactionsByBlock_Handler,
		},
		{
			MethodName: "ListTransactionsByAddress",
			Handler:    _IndexerService_ListTransactionsByAddress_Handler,
		},
		{
			MethodName: "GetProgress",
			Handler:    _IndexerService_GetProgress_Handler,
		},
		{
			MethodName: "ListGaps",
			Handler:    _IndexerService_ListGaps_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _IndexerService_GetStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamBlocks",
			Handler:       _IndexerService_StreamBlocks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamTransactions",
			Handler:       _IndexerService_StreamTransactions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamProgress",
			Handler:       _IndexerService_StreamProgress_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/indexer/v1/indexer.proto",
}
